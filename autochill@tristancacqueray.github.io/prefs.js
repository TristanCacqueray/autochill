// Generated by purs bundle 0.14.0
var PS = {};
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqNumber = new Eq($foreign.eqNumberImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["max"] = max;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["AutoChill.Curve"] = $PS["AutoChill.Curve"] || {};
  var exports = $PS["AutoChill.Curve"];
  var Data_Ord = $PS["Data.Ord"];                
  var chillTemperature = function (cutoff) {
      return function (slope) {
          return function (time) {
              var x = Data_Ord.max(Data_Ord.ordNumber)(0.0)(time - cutoff);
              var y = 1.0 - x * x * slope;
              var temp = Data_Ord.max(Data_Ord.ordNumber)(0.0)(y);
              return temp;
          };
      };
  };
  exports["chillTemperature"] = chillTemperature;
})(PS);
(function(exports) {
  "use strict";

  exports.moveTo = (cr) => x => y => () => cr.moveTo(x, y)      

  exports.setSourceRGB = (cr) => r => g => b => () => cr.setSourceRGB(r, g, b)

  exports.showText = (cr) => txt => () => cr.showText(txt)                      

  exports.lineTo = (cr) => x => y => () => cr.lineTo(x, y)

  exports.stroke = (cr) => () => cr.stroke()
})(PS["Cairo"] = PS["Cairo"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Cairo"] = $PS["Cairo"] || {};
  var exports = $PS["Cairo"];
  var $foreign = $PS["Cairo"];
  exports["moveTo"] = $foreign.moveTo;
  exports["setSourceRGB"] = $foreign.setSourceRGB;
  exports["showText"] = $foreign.showText;
  exports["lineTo"] = $foreign.lineTo;
  exports["stroke"] = $foreign.stroke;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];            
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $311 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($312) {
                      return $311(f($312));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  exports["Foldable"] = Foldable;
  exports["foldl"] = foldl;
  exports["traverse_"] = traverse_;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  }; 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Show = $PS["Data.Show"];                
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe (line 216, column 1 - line 218, column 28): " + [ v.constructor.name ]);
      });
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["showMaybe"] = showMaybe;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";              

  function nativeImul(a) {
    return function (b) {
      return Math.imul(a, b);
    };
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
  function emulatedImul(a) {
    /*jshint bitwise: false*/
    return function (b) {
      var ah = a >>> 16 & 0xffff;
      var al = a & 0xffff;
      var bh = b >>> 16 & 0xffff;
      var bl = b & 0xffff;
      // the shift by 0 fixes the sign on the high part
      // the final |0 converts the unsigned value into a signed value
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
  } 

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["round"] = $foreign.round;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  exports["round"] = round;
  exports["fromString"] = fromString;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupUnit"] = semigroupUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var monoidUnit = new Monoid(function () {
      return Data_Semigroup.semigroupUnit;
  }, Data_Unit.unit);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $204 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($205) {
                  return $204(f($205));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = (function () {
              var go = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v instanceof Nil) {
                              $tco_done = true;
                              return acc;
                          };
                          if (v instanceof Cons) {
                              $tco_var_acc = new Cons(v.value0, acc);
                              $copy_v = v.value1;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return go(Nil.value);
          })();
          var $206 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($207) {
              return $206(rev($207));
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_Types = $PS["Data.List.Types"];
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Data_Boolean.otherwise) {
              var go = function ($copy_s) {
                  return function ($copy_e) {
                      return function ($copy_step) {
                          return function ($copy_rest) {
                              var $tco_var_s = $copy_s;
                              var $tco_var_e = $copy_e;
                              var $tco_var_step = $copy_step;
                              var $tco_done = false;
                              var $tco_result;
                              function $tco_loop(s, e, step, rest) {
                                  if (s === e) {
                                      $tco_done = true;
                                      return new Data_List_Types.Cons(s, rest);
                                  };
                                  if (Data_Boolean.otherwise) {
                                      $tco_var_s = s + step | 0;
                                      $tco_var_e = e;
                                      $tco_var_step = step;
                                      $copy_rest = new Data_List_Types.Cons(s, rest);
                                      return;
                                  };
                                  throw new Error("Failed pattern match at Data.List (line 152, column 3 - line 153, column 65): " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                              while (!$tco_done) {
                                  $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                              };
                              return $tco_result;
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $225 = start > end;
                  if ($225) {
                      return 1;
                  };
                  return -1 | 0;
              })())(Data_List_Types.Nil.value);
          };
          throw new Error("Failed pattern match at Data.List (line 148, column 1 - line 148, column 32): " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  exports["range"] = range;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";      
  exports.log = msg => () => log(msg)
})(PS["GJS"] = PS["GJS"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["GJS"] = $PS["GJS"] || {};
  var exports = $PS["GJS"];
  var $foreign = $PS["GJS"];
  exports["log"] = $foreign.log;
})(PS);
(function(exports) {
  // Generated by PureGirGen.hs
  "use strict";

  const Variant = imports.gi.GLib.Variant;             
  exports.new_uint32 = v => () => Variant.new_uint32(v)
})(PS["GLib.Variant"] = PS["GLib.Variant"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["GLib.Variant"] = $PS["GLib.Variant"] || {};
  var exports = $PS["GLib.Variant"];
  var $foreign = $PS["GLib.Variant"];
  exports["new_uint32"] = $foreign.new_uint32;
})(PS);
(function(exports) {
  "use strict";

  const GObject = imports.gi.GObject;

  exports.unsafe_signal_connect_closure = obj => name => cb => () =>
    GObject.signal_connect_closure(obj, name, cb, true)
})(PS["GObject"] = PS["GObject"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["GObject"] = $PS["GObject"] || {};
  var exports = $PS["GObject"];
  var $foreign = $PS["GObject"];
  var signal_connect_closure = function (dictGObject) {
      return $foreign.unsafe_signal_connect_closure;
  };
  exports["signal_connect_closure"] = signal_connect_closure;
})(PS);
(function(exports) {
  "use strict";

  const Gio = imports.gi.Gio;

  exports.new = name => () => Gio.Settings.new(name);
  exports.new_full = schema => () => Gio.Settings.new_full(schema, null, null)
  exports.set_value = instance => key => value => () => instance.set_value(key, value)

  exports.get_int = instance => key => () => instance.get_int(key)
  exports.set_int = instance => key => value => () => instance.set_int(key, value)
  exports.get_double = instance => key => () => instance.get_double(key)
  exports.set_double = instance => key => value => () => instance.set_double(key, value)
})(PS["Gio.Settings"] = PS["Gio.Settings"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Gio.Settings"] = $PS["Gio.Settings"] || {};
  var exports = $PS["Gio.Settings"];
  var $foreign = $PS["Gio.Settings"];
  exports["new"] = $foreign["new"];
  exports["new_full"] = $foreign.new_full;
  exports["set_value"] = $foreign.set_value;
  exports["set_int"] = $foreign.set_int;
  exports["get_int"] = $foreign.get_int;
  exports["set_double"] = $foreign.set_double;
  exports["get_double"] = $foreign.get_double;
})(PS);
(function(exports) {
  "use strict";

  imports.gi.versions.Gtk = "4.0";
  const Gtk4 = imports.gi.Gtk;                         

  exports.unsafe_set_size_request = widget => height => width => () => widget.set_size_request(height, width)

  exports.unsafe_queue_draw = widget => () => widget.queue_draw()
})(PS["Gtk4"] = PS["Gtk4"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Gtk4"] = $PS["Gtk4"] || {};
  var exports = $PS["Gtk4"];
  var $foreign = $PS["Gtk4"];
  var set_size_request = function (dictWidget) {
      return $foreign.unsafe_set_size_request;
  };
  var queue_draw = function (dictWidget) {
      return $foreign.unsafe_queue_draw;
  };
  exports["queue_draw"] = queue_draw;
  exports["set_size_request"] = set_size_request;
})(PS);
(function(exports) {
  "use strict";

  const Gtk4 = imports.gi.Gtk;

  exports.new = (orientation) => spacing => () => Gtk4.Box.new(orientation, spacing)

  exports.unsafe_append = (box) => widget => () => box.append(widget)
})(PS["Gtk4.Box"] = PS["Gtk4.Box"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Gtk4.Box"] = $PS["Gtk4.Box"] || {};
  var exports = $PS["Gtk4.Box"];
  var $foreign = $PS["Gtk4.Box"];
  var append = function (dictWidget) {
      return $foreign.unsafe_append;
  };
  exports["append"] = append;
  exports["new"] = $foreign["new"];
})(PS);
(function(exports) {
  "use strict";

  const Gtk4 = imports.gi.Gtk;         

  exports.new_with_label = (txt) => () => Gtk4.Button.new_with_label(txt)
})(PS["Gtk4.Button"] = PS["Gtk4.Button"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Gtk4.Button"] = $PS["Gtk4.Button"] || {};
  var exports = $PS["Gtk4.Button"];
  var $foreign = $PS["Gtk4.Button"];
  exports["new_with_label"] = $foreign.new_with_label;
})(PS);
(function(exports) {
  "use strict";

  const Gtk4 = imports.gi.Gtk;

  exports.new = () => Gtk4.DrawingArea.new()

  exports.set_draw_func = (da) => cb => () => da.set_draw_func((_, cr) => cb(cr)())
})(PS["Gtk4.DrawingArea"] = PS["Gtk4.DrawingArea"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Gtk4.DrawingArea"] = $PS["Gtk4.DrawingArea"] || {};
  var exports = $PS["Gtk4.DrawingArea"];
  var $foreign = $PS["Gtk4.DrawingArea"];
  exports["new"] = $foreign["new"];
  exports["set_draw_func"] = $foreign.set_draw_func;
})(PS);
(function(exports) {
  "use strict";

  const Gtk4 = imports.gi.Gtk;

  exports.new = () => Gtk4.Entry.new()

  exports.get_buffer = (entry) => () => entry.get_buffer()
})(PS["Gtk4.Entry"] = PS["Gtk4.Entry"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Gtk4.Entry"] = $PS["Gtk4.Entry"] || {};
  var exports = $PS["Gtk4.Entry"];
  var $foreign = $PS["Gtk4.Entry"];
  exports["new"] = $foreign["new"];
  exports["get_buffer"] = $foreign.get_buffer;
})(PS);
(function(exports) {
  "use strict";

  exports.get_text = (eb) => () => eb.get_text()
  exports.set_text = (eb) => txt => () => eb.set_text(txt, txt.length)
})(PS["Gtk4.EntryBuffer"] = PS["Gtk4.EntryBuffer"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Gtk4.EntryBuffer"] = $PS["Gtk4.EntryBuffer"] || {};
  var exports = $PS["Gtk4.EntryBuffer"];
  var $foreign = $PS["Gtk4.EntryBuffer"];
  exports["get_text"] = $foreign.get_text;
  exports["set_text"] = $foreign.set_text;
})(PS);
(function(exports) {
  "use strict";

  const Gtk4 = imports.gi.Gtk;

  exports.new = (txt) => () => Gtk4.Label.new(txt)
})(PS["Gtk4.Label"] = PS["Gtk4.Label"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Gtk4.Label"] = $PS["Gtk4.Label"] || {};
  var exports = $PS["Gtk4.Label"];
  var $foreign = $PS["Gtk4.Label"];
  exports["new"] = $foreign["new"];
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Gtk4.Orientation"] = $PS["Gtk4.Orientation"] || {};
  var exports = $PS["Gtk4.Orientation"];
  var horizontal = 0;
  exports["horizontal"] = horizontal;
})(PS);
(function(exports) {
  "use strict";

  const Gtk4 = imports.gi.Gtk;

  exports.unsafe_get_value = (r) => () => r.get_value()

  exports.unsafe_set_value = (r) => v => () => r.set_value(v)
})(PS["Gtk4.Range"] = PS["Gtk4.Range"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Gtk4.Range"] = $PS["Gtk4.Range"] || {};
  var exports = $PS["Gtk4.Range"];
  var $foreign = $PS["Gtk4.Range"];
  var set_value = function (dictRange) {
      return $foreign.unsafe_set_value;
  };
  var get_value = function (dictRange) {
      return $foreign.unsafe_get_value;
  };
  exports["get_value"] = get_value;
  exports["set_value"] = set_value;
})(PS);
(function(exports) {
  "use strict";

  const Gtk4 = imports.gi.Gtk;

  exports.new_with_range = (orientation) => min => max => step => () => Gtk4.Scale.new_with_range(orientation, min, max, step)
  exports.set_draw_value = (scale) => draw_value => () => scale.set_draw_value(draw_value)
})(PS["Gtk4.Scale"] = PS["Gtk4.Scale"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Gtk4.Scale"] = $PS["Gtk4.Scale"] || {};
  var exports = $PS["Gtk4.Scale"];
  var $foreign = $PS["Gtk4.Scale"];
  exports["new_with_range"] = $foreign.new_with_range;
  exports["set_draw_value"] = $foreign.set_draw_value;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["AutoChill.PrefsWidget"] = $PS["AutoChill.PrefsWidget"] || {};
  var exports = $PS["AutoChill.PrefsWidget"];
  var AutoChill_Curve = $PS["AutoChill.Curve"];
  var Cairo = $PS["Cairo"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var GJS = $PS["GJS"];
  var GLib_Variant = $PS["GLib.Variant"];
  var GObject = $PS["GObject"];
  var Gio_Settings = $PS["Gio.Settings"];
  var Gtk4 = $PS["Gtk4"];
  var Gtk4_Box = $PS["Gtk4.Box"];
  var Gtk4_Button = $PS["Gtk4.Button"];
  var Gtk4_DrawingArea = $PS["Gtk4.DrawingArea"];
  var Gtk4_Entry = $PS["Gtk4.Entry"];
  var Gtk4_EntryBuffer = $PS["Gtk4.EntryBuffer"];
  var Gtk4_Label = $PS["Gtk4.Label"];
  var Gtk4_Orientation = $PS["Gtk4.Orientation"];
  var Gtk4_Range = $PS["Gtk4.Range"];
  var Gtk4_Scale = $PS["Gtk4.Scale"];                
  var graphY = 500.0;
  var graphX = 500.0;
  var drawCurve = function (cutoffRef) {
      return function (slopeRef) {
          return function (cr) {
              var segment = function (cutoff) {
                  return function (slope) {
                      return function (maxX) {
                          return function (maxY) {
                              return function (x) {
                                  var xn = x / maxX;
                                  var yn = AutoChill_Curve.chillTemperature(cutoff)(slope)(xn);
                                  var maxY$prime = maxY - 20.0 * 2.0;
                                  var y$prime = 20.0 + (1.0 - yn) * maxY$prime;
                                  var maxX$prime = maxX - 20.0 * 2.0;
                                  var x$prime = 20.0 + xn * maxX$prime;
                                  return Cairo.lineTo(cr)(x$prime)(y$prime);
                              };
                          };
                      };
                  };
              };
              var legendY = function (maxX) {
                  return function (maxY) {
                      var yAxis = 20.0 + 5.0;
                      return function __do() {
                          Cairo.moveTo(cr)(yAxis)(yAxis + 6.0)();
                          return Cairo.showText(cr)("Temperature")();
                      };
                  };
              };
              var legendX = function (maxX) {
                  return function (maxY) {
                      var xAxis = maxY - 20.0 / 2.5;
                      return function __do() {
                          Cairo.moveTo(cr)(20.0 / 2.0)(xAxis)();
                          Cairo.showText(cr)("Work start")();
                          Cairo.moveTo(cr)(maxX / 2.0)(xAxis)();
                          Cairo.showText(cr)("->")();
                          Cairo.moveTo(cr)(maxX - 35.0)(xAxis)();
                          return Cairo.showText(cr)("Break")();
                      };
                  };
              };
              var legend = function (maxX) {
                  return function (maxY) {
                      return function __do() {
                          legendX(maxX)(maxY)();
                          return legendY(maxX)(maxY)();
                      };
                  };
              };
              var graph = function (x) {
                  return function (y) {
                      return function __do() {
                          var cutoff = Effect_Ref.read(cutoffRef)();
                          var slope = Effect_Ref.read(slopeRef)();
                          Cairo.moveTo(cr)(20.0)(20.0)();
                          Cairo.setSourceRGB(cr)(0.0)(0.0)(0.0)();
                          Data_Foldable.traverse_(Effect.applicativeEffect)(Data_List_Types.foldableList)(segment(cutoff)(slope)(x)(y))(Data_Functor.map(Data_List_Types.functorList)(Data_Int.toNumber)(Data_List.range(0)(Data_Int.round(x))))();
                          return Cairo.stroke(cr)();
                      };
                  };
              };
              var box = function (maxX) {
                  return function (maxY) {
                      var maxY$prime = maxY - 20.0;
                      var maxX$prime = maxX - 20.0;
                      return function __do() {
                          Cairo.moveTo(cr)(20.0)(20.0)();
                          Cairo.setSourceRGB(cr)(0.8)(0.8)(0.8)();
                          Cairo.lineTo(cr)(maxX$prime)(20.0)();
                          Cairo.lineTo(cr)(maxX$prime)(maxY$prime)();
                          Cairo.lineTo(cr)(20.0)(maxY$prime)();
                          Cairo.lineTo(cr)(20.0)(20.0)();
                          return Cairo.stroke(cr)();
                      };
                  };
              };
              return function __do() {
                  box(graphX)(graphY)();
                  graph(graphX)(graphY)();
                  return legend(graphX)(graphY)();
              };
          };
      };
  };
  var mkPrefWidget = function (settings) {
      var temp = function (labelText) {
          return function (name) {
              return function __do() {
                  var label = Gtk4_Label["new"](labelText + ":")();
                  Gtk4.set_size_request()(label)(200)(50)();
                  var entry = Gtk4_Entry["new"]();
                  var eb = Gtk4_Entry.get_buffer(entry)();
                  var val = Gio_Settings.get_int(settings)(name)();
                  Gtk4_EntryBuffer.set_text(eb)(Data_Show.show(Data_Show.showInt)(val))();
                  var box = Gtk4_Box["new"](0)(5.0)();
                  var tryButton = Gtk4_Button.new_with_label("Try")();
                  GObject.signal_connect_closure()(tryButton)("clicked")(function __do() {
                      var vM = Data_Functor.map(Effect.functorEffect)(Data_Int.fromString)(Gtk4_EntryBuffer.get_text(eb))();
                      if (vM instanceof Data_Maybe.Just) {
                          var colorSettings = Gio_Settings["new"]("org.gnome.settings-daemon.plugins.color")();
                          var v$prime = GLib_Variant.new_uint32(vM.value0)();
                          return Data_Functor["void"](Effect.functorEffect)(Gio_Settings.set_value(colorSettings)("night-light-temperature")(v$prime))();
                      };
                      if (vM instanceof Data_Maybe.Nothing) {
                          return GJS.log("Invalid value")();
                      };
                      throw new Error("Failed pattern match at AutoChill.PrefsWidget (line 179, column 13 - line 184, column 49): " + [ vM.constructor.name ]);
                  })();
                  Gtk4_Box.append()(box)(label)();
                  Gtk4_Box.append()(box)(entry)();
                  Gtk4_Box.append()(box)(tryButton)();
                  return new Data_Tuple.Tuple(box, eb);
              };
          };
      };
      var settingRef = function (name) {
          return function __do() {
              var value = Gio_Settings.get_double(settings)(name)();
              var ref = Effect_Ref["new"](value)();
              return new Data_Tuple.Tuple(ref, value);
          };
      };
      var range = function (labelText) {
          return function (min) {
              return function (max) {
                  return function (step) {
                      return function __do() {
                          var label = Gtk4_Label["new"](labelText + ":")();
                          Gtk4.set_size_request()(label)(200)(50)();
                          var scale = Gtk4_Scale.new_with_range(Gtk4_Orientation.horizontal)(min)(max)(step)();
                          Gtk4.set_size_request()(scale)(300)(50)();
                          Gtk4_Scale.set_draw_value(scale)(true)();
                          var box = Gtk4_Box["new"](0)(5.0)();
                          Gtk4_Box.append()(box)(label)();
                          Gtk4_Box.append()(box)(scale)();
                          return new Data_Tuple.Tuple(box, scale);
                      };
                  };
              };
          };
      };
      var onDrawingSettingChange = function (ref) {
          return function (widget) {
              return function (drawing) {
                  return function __do() {
                      var value = Gtk4_Range.get_value()(widget)();
                      Effect_Ref.write(value)(ref)();
                      return Gtk4.queue_draw()(drawing)();
                  };
              };
          };
      };
      var onChange = function (scale) {
          return function __do() {
              GJS.log("onChange called!")();
              var v = Data_Functor.map(Effect.functorEffect)(Data_Int.toNumber)(Gio_Settings.get_int(settings)("duration"))();
              GJS.log("to: " + Data_Show.show(Data_Show.showNumber)(v))();
              Gtk4_Range.set_value()(scale)(v)();
              return Gtk4.queue_draw()(scale)();
          };
      };
      var onApply = function (scale) {
          return function (work) {
              return function (chill) {
                  return function (cutoff) {
                      return function (slope) {
                          return function __do() {
                              GJS.log("onApply called")();
                              var duration = Gtk4_Range.get_value()(scale)();
                              var cutoffV = Gtk4_Range.get_value()(cutoff)();
                              var slopeV = Gtk4_Range.get_value()(slope)();
                              var workValueM = Data_Functor.map(Effect.functorEffect)(Data_Int.fromString)(Gtk4_EntryBuffer.get_text(work))();
                              var chillValueM = Data_Functor.map(Effect.functorEffect)(Data_Int.fromString)(Gtk4_EntryBuffer.get_text(chill))();
                              Data_Functor["void"](Effect.functorEffect)(Gio_Settings.set_int(settings)("duration")(Data_Int.round(duration)))();
                              Data_Functor["void"](Effect.functorEffect)(Gio_Settings.set_double(settings)("cutoff")(cutoffV))();
                              Data_Functor["void"](Effect.functorEffect)(Gio_Settings.set_double(settings)("slope")(slopeV))();
                              (function () {
                                  if (workValueM instanceof Data_Maybe.Just) {
                                      return Data_Functor["void"](Effect.functorEffect)(Gio_Settings.set_int(settings)("work-temp")(workValueM.value0))();
                                  };
                                  if (workValueM instanceof Data_Maybe.Nothing) {
                                      return GJS.log("Bad work value")();
                                  };
                                  throw new Error("Failed pattern match at AutoChill.PrefsWidget (line 201, column 5 - line 203, column 42): " + [ workValueM.constructor.name ]);
                              })();
                              (function () {
                                  if (chillValueM instanceof Data_Maybe.Just) {
                                      return Data_Functor["void"](Effect.functorEffect)(Gio_Settings.set_int(settings)("chill-temp")(chillValueM.value0))();
                                  };
                                  if (chillValueM instanceof Data_Maybe.Nothing) {
                                      return GJS.log("Bad chill value")();
                                  };
                                  throw new Error("Failed pattern match at AutoChill.PrefsWidget (line 204, column 5 - line 206, column 43): " + [ chillValueM.constructor.name ]);
                              })();
                              return GJS.log("applied " + (Data_Show.show(Data_Show.showNumber)(duration) + (" " + (Data_Show.show(Data_Maybe.showMaybe(Data_Show.showInt))(workValueM) + (" " + Data_Show.show(Data_Maybe.showMaybe(Data_Show.showInt))(chillValueM))))))();
                          };
                      };
                  };
              };
          };
      };
      return function __do() {
          var v = range("Work duration (in minutes)")(20.0)(120.0)(5.0)();
          var v1 = temp("Work temperature")("work-temp")();
          var v2 = temp("Chill temperature")("chill-temp")();
          var v3 = range("Cutoff")(0.1)(0.9)(0.1)();
          var v4 = range("Slope")(1.0)(100.0)(0.1)();
          GObject.signal_connect_closure()(settings)("changed::duration")(onChange(v.value1))();
          var val = Gio_Settings.get_int(settings)("duration")();
          Gtk4_Range.set_value()(v.value1)(Data_Int.toNumber(val))();
          var v5 = settingRef("cutoff")();
          Gtk4_Range.set_value()(v3.value1)(v5.value1)();
          var v6 = settingRef("slope")();
          Gtk4_Range.set_value()(v4.value1)(v6.value1)();
          var drawing = Gtk4_DrawingArea["new"]();
          Gtk4_DrawingArea.set_draw_func(drawing)(drawCurve(v5.value0)(v6.value0))();
          Gtk4.set_size_request()(drawing)(Data_Int.round(graphX))(Data_Int.round(graphY))();
          GObject.signal_connect_closure()(v3.value1)("value-changed")(onDrawingSettingChange(v5.value0)(v3.value1)(drawing))();
          GObject.signal_connect_closure()(v4.value1)("value-changed")(onDrawingSettingChange(v6.value0)(v4.value1)(drawing))();
          var apply = Gtk4_Button.new_with_label("Apply")();
          GObject.signal_connect_closure()(apply)("clicked")(onApply(v.value1)(v1.value1)(v2.value1)(v3.value1)(v4.value1))();
          var box = Gtk4_Box["new"](1)(5.0)();
          Gtk4_Box.append()(box)(v.value0)();
          Gtk4_Box.append()(box)(v1.value0)();
          Gtk4_Box.append()(box)(v2.value0)();
          Gtk4_Box.append()(box)(v3.value0)();
          Gtk4_Box.append()(box)(v4.value0)();
          Gtk4_Box.append()(box)(apply)();
          Gtk4_Box.append()(box)(drawing)();
          return box;
      };
  };
  exports["mkPrefWidget"] = mkPrefWidget;
})(PS);
(function(exports) {
  "use strict";

  exports.getCurrentExtension = () => imports.misc.extensionUtils.getCurrentExtension()

  exports.getPath = (ext) => name => () => ext.dir.get_child(name).get_path()
})(PS["ExtensionUtils"] = PS["ExtensionUtils"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["ExtensionUtils"] = $PS["ExtensionUtils"] || {};
  var exports = $PS["ExtensionUtils"];
  var $foreign = $PS["ExtensionUtils"];
  exports["getCurrentExtension"] = $foreign.getCurrentExtension;
  exports["getPath"] = $foreign.getPath;
})(PS);
(function(exports) {
  "use strict";

  const Gio = imports.gi.Gio;

  exports.new_from_directory = path => trusted => () => Gio.SettingsSchemaSource.new_from_directory(path, null, trusted)

  exports.lookup = s => name => recursive => () => s.lookup(name, recursive)
})(PS["Gio.SettingsSchemaSource"] = PS["Gio.SettingsSchemaSource"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Gio.SettingsSchemaSource"] = $PS["Gio.SettingsSchemaSource"] || {};
  var exports = $PS["Gio.SettingsSchemaSource"];
  var $foreign = $PS["Gio.SettingsSchemaSource"];
  exports["new_from_directory"] = $foreign.new_from_directory;
  exports["lookup"] = $foreign.lookup;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["AutoChill.Settings"] = $PS["AutoChill.Settings"] || {};
  var exports = $PS["AutoChill.Settings"];
  var ExtensionUtils = $PS["ExtensionUtils"];
  var Gio_Settings = $PS["Gio.Settings"];
  var Gio_SettingsSchemaSource = $PS["Gio.SettingsSchemaSource"];                
  var getSettingsFromPath = function (path) {
      return function __do() {
          var schemaSource = Gio_SettingsSchemaSource.new_from_directory(path)(false)();
          var schema = Gio_SettingsSchemaSource.lookup(schemaSource)("org.gnome.shell.extensions.autochill")(false)();
          return Gio_Settings.new_full(schema)();
      };
  };
  var getSettings = function __do() {
      var me = ExtensionUtils.getCurrentExtension();
      var path = ExtensionUtils.getPath(me)("schemas")();
      return getSettingsFromPath(path)();
  };
  exports["getSettings"] = getSettings;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["AutoChill.Prefs"] = $PS["AutoChill.Prefs"] || {};
  var exports = $PS["AutoChill.Prefs"];
  var AutoChill_PrefsWidget = $PS["AutoChill.PrefsWidget"];
  var AutoChill_Settings = $PS["AutoChill.Settings"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var GJS = $PS["GJS"];                
  var main = Control_Applicative.pure(Effect.applicativeEffect)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
  var init = Control_Applicative.pure(Effect.applicativeEffect)(Data_Monoid.mempty(Data_Monoid.monoidUnit));
  var buildPrefsWidget = function __do() {
      GJS.log("buildPrefsWidget called")();
      var settings = AutoChill_Settings.getSettings();
      return AutoChill_PrefsWidget.mkPrefWidget(settings)();
  };
  exports["main"] = main;
  exports["init"] = init;
  exports["buildPrefsWidget"] = buildPrefsWidget;
})(PS);
PS["AutoChill.Prefs"].main();// necessary footer to transform a spago build into a valid gnome extension prefs
function init() { PS["AutoChill.Prefs"].init(); }
function buildPrefsWidget() { return PS["AutoChill.Prefs"].buildPrefsWidget(); }
